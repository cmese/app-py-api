# app-py-api/azure-pipelines.yml
trigger:
  branches:
    include:
      - main

# optional but good practice: run on Linux agent
pool:
  name: local-pool

variables:
  # name your ACR login server and repo path
  ACR_LOGIN_SERVER: "myregistry.azurecr.io"
  IMAGE_NAME: "app-py-api"

stages:
  - stage: BuildAndPublish
    displayName: Build, Test, Push Image
    jobs:
      - job: build_test_push
        displayName: Lint, test, docker build, push to ACR
        steps:
          - checkout: self

          # install Python deps, run ruff/pytest/etc
          - task: Bash@3
            displayName: "Run tests/lint"
            inputs:
              targetType: "inline"
              script: |
                python3 -m venv .venv
                source .venv/bin/activate
                pip install -r requirements.txt -r requirements-dev.txt
                ruff check .
                pytest -q

          # generate a unique image tag for this commit
          # e.g. short git SHA
          - task: Bash@3
            name: MakeTag
            displayName: "Set IMAGE_TAG variable"
            inputs:
              targetType: "inline"
              script: |
                SHORT_SHA=$(echo $(Build.SourceVersion) | cut -c1-7)
                echo "##vso[task.setvariable variable=IMAGE_TAG]${SHORT_SHA}"

          # docker login to ACR
          - task: Bash@3
            displayName: "Docker build & push"
            inputs:
              targetType: "inline"
              script: |
                echo "Logging in to ACR..."
                az acr login --name ${ACR_LOGIN_SERVER%%.*}

                echo "Building image..."
                docker build -t $(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(IMAGE_TAG) .

                echo "Pushing image..."
                docker push $(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(IMAGE_TAG)

          # publish the image tag as a pipeline artifact
          - task: Bash@3
            name: WriteTagFile
            displayName: "Write image tag file"
            inputs:
              targetType: "inline"
              script: |
                echo $(IMAGE_TAG) > image_tag.txt

          - publish: image_tag.txt
            displayName: "Publish image_tag artifact"
            artifact: image_tag
